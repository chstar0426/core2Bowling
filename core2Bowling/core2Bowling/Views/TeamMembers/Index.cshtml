@model IEnumerable<core2Bowling.Models.TeamMember>

@{
    ViewData["Title"] = "Index";
    var game = (Game)ViewData["Game"];
    int queryGame = Context.Request.Query["game"].ToString() == "" ? 1 : Convert.ToInt32(Context.Request.Query["game"]);
    int penalty = game.Penalty;  // 우승팀 차감점수
    bool fine = game.bFine; //벌금표시

    
}
<h2>게임상세정보 &nbsp;&nbsp;<small><i class="glyphicon glyphicon glyphicon-hand-right"></i> 각 게임에 대한 상세 기록입니다</small></h2>
<hr />
<div class="panel panel-info">
    <div class="panel-heading">
        <h3 class="panel-title">경기개요</h3>
    </div>
    <div class="panel-body">
        <div class="text-danger  pull-left">@game.GameKind  @(string.IsNullOrEmpty(game.GameContent) ? "" : "(" + game.GameContent + ")") </div>
        &nbsp;&nbsp; | &nbsp;&nbsp; @game.Playtime  (@game.Place)
        &nbsp;&nbsp; | &nbsp;&nbsp;  @(game.bFine ? "벌금 있음" : "벌금 없음")
        &nbsp;&nbsp; | &nbsp;&nbsp;  @(game.bHandicap ? "핸디 적용" : "핸디 미적용")
        &nbsp;&nbsp; | &nbsp;&nbsp;  @(game.bCalTotal ? "총점 계산" : "평균계산") / @game.Penalty 감점
        <div class="pull-right">
            @if (!User.IsInRole("Member"))
            {
                <a asp-action="CreateTeam" asp-route-id="@game.ID">새로운경기</a> @:|

            }
            <a asp-action="IndexGame" asp-route-id="@ViewContext.RouteData.Values["Id"]">개인결과</a>
        </div>
        @if (!string.IsNullOrEmpty(game.GameMemo))
        {
            <br /><br />
            @*<i class="glyphicon glyphicon glyphicon-arrow-right" style="padding-top:15px;"></i>*@ <pre><strong>@game.GameMemo</strong></pre>
        }

    </div>
</div>

<br />

<div class="tabbable-panel">
    <div class="tabbable-line">
        <ul class="nav nav-tabs ">

            @for (int i = 1; i < game.SubGames.Count() + 1; i++)
            {
                string selectActive = string.Empty;
                if (i == queryGame)
                {
                    selectActive = "active";
                }
                <li class="@selectActive">
                    <a href="#tab_game_@i" data-toggle="tab">
                        @i  경기
                    </a>
                </li>

            }

        </ul>
        <div class="tab-content">

            @{
                int teamSequence = -1;
                int round = 0;

                string teamName = string.Empty;
                int roundID = 0;
                int colcnt = 0;
                int downScoreCount = 0;
                int downScoreTotal = 0;

                int colInc = 0;


                string winwin = string.Empty;
                string winNext = string.Empty;
                string winPre = string.Empty;


                int[] downScoreTeam = new int[Model.Select(t => t.Team.TeamName).Distinct().Count()];

            }

            @foreach (var item in Model)
            {

                //라운드 처리 (각 라운드 처음)
                if (round != item.Team.SubGame.Round)
                {
                    if (round > 0)
                    {
                        if (colInc < colcnt)
                        {
                            //전체 게임의 마직막
                            for (int i = colInc; i < colcnt; i++)
                            {
                                @:<td></td>
                                @:<td></td>

                            }

                        }

                        @:</tr><tr>
                            <td colspan="@(colcnt * 2)">
                                @if (!User.IsInRole("Member"))
                                {
                                    <a asp-action="Edit" asp-route-id="@roundID" asp-route-winTeam="@winPre">점수입력</a> @:|
                                    <a asp-action="EditTeam" asp-route-id="@roundID">팀수정</a> @:|
                                    <a asp-action="NextTeam" asp-route-id="@roundID">다음경기</a> @:|
                                    <a asp-action="DelTeam" asp-route-id="@roundID">게임삭제</a>
                                }
                                <div class="pull-right">@(fine == false ? "" : "에바벌금 : " + string.Format("{0:n0}", (downScoreCount * 1000)))</div>
                            </td>
                            @:</tr></table></div>
                            

                    downScoreCount = 0;


                } //if(round > 0)


                round = item.Team.SubGame.Round;

                string selectActive = string.Empty;
                if (round == queryGame)
                {
                    selectActive = "active";
                }

                @:<div class="tab-pane @selectActive" id="tab_game_@round">
                    @:<table class="table table-bordered">
                    
                        //테이블 상단 총점 처리
                        teamName = string.Empty;

                        roundID = Model.Where(m => m.Team.SubGame.Round == round).First().Team.SubGameID;

                        var listScore = new List<int>();

                        var TeamScore = Model.Where(m => m.Team.SubGameID == roundID).GroupBy(t => t.Team.TeamName);
                        colcnt = TeamScore.Count();    /* 팀수*/
                        colInc = colcnt; /*컬럼수 초기화 역활을 함, 라운더 처음에 팀수와 차이로 발생하는 빈 컬럼 예방*/


                        foreach (var g in TeamScore)
                        {
                            //g.Sum
                            //int imsi = game.bCalTotal ? g.Sum(a => a.Score) : (int)Math.Round(g.Average(a => a.Score));
                            int imsi = g.Sum(a => a.Score); 

                            if (g.Key == winwin)
                            {
                                imsi -= penalty;
                            }

                            imsi = game.bCalTotal ? imsi : (int)Math.Round(imsi / (float)g.Count());
                            
                            listScore.Add(imsi);

                        };

                        int maxTeamScore = listScore.Max();

                        <tr>
                            @{
                                
                                winPre = winNext;

                            }
                            @foreach (var s in TeamScore)
                            {
                                string selectedRow = "";

                                int imsi=s.Sum(a => a.Score) - ((winPre == s.Key) ? penalty : 0);

                                //g.Sum
                                //int sScore = (game.bCalTotal ? s.Sum(a => a.Score) : (int)Math.Round(s.Average(a => a.Score))) - ((winPre == s.Key) ? penalty : 0);
                                
                                int sScore = game.bCalTotal ? imsi : (int)Math.Round(imsi / (float)s.Count());



                                if (sScore >= maxTeamScore && maxTeamScore != 0)
                                {
                                    selectedRow = "success";
                                    winNext = s.Key;
                                    winwin = s.Key;
                                }

                                <td colspan="2" class="@selectedRow text-center">
                                    @s.Key (@string.Format("{0:n0}", sScore) 점) @((winPre == s.Key) ? "*" : "")
                                </td>


                            }

                        </tr>

                    }  //라운드 처리 (각 라운드 처음)


                    string styleScore = "";

                    int imsiAvg = item.Average;

                    var handi = item.Bowler.BowlerAverage.Handicap;



                    //평균 200이상은 200, 150이하는 150으로 계산
                    if (handi == 0 && item.Average > 199)
                    {
                        imsiAvg = 200;
                    }
                    else if (handi == 15 && item.Average > 189)
                    {
                        imsiAvg = 190;
                    }
                    else if (item.Average > 0 && item.Average < 150)
                    {
                        imsiAvg = 150;
                    }

                    if (item.Score > 199)
                    {
                        styleScore = "overScore";
                    }
                    else if (item.Score - imsiAvg < 0 && item.Bowler.Group!="zGroup")
                    {

                        styleScore = (fine == false ? "" : "downScore");
                        downScoreCount++;
                        downScoreTotal++;
                        downScoreTeam[item.Team.TeamOrder]++;

                    }



                    if (item.Sequence != teamSequence)
                    {
                        if (teamSequence > -1)
                        {
                            // 해당 라인의 뒷 공백, 주의 라운드 앞 공백이 생겨서 colcnt와 colInc를 같은 값으로 초기화
                            if (colInc < colcnt)
                            {
                                for (int i = colInc; i < colcnt; i++)
                                {
                                    @:<td></td>
                                    @:<td></td>
                                    
                                }
                            }
                            @:</tr>
                        }

                        teamSequence = item.Sequence;
                        @:<tr>
                            colInc = 0;

                        }

                        //해당 라인의 앞 공백
                        for (int i = colInc; i < item.Team.TeamOrder; i++)
                        {
                            <td></td>
                            <td></td>


                        }

                        colInc = item.Team.TeamOrder;

                        <td class="@(handi > 0 ? "text-success":"")">
                            @Html.DisplayFor(modelItem => item.Bowler.Name)
                            (@Html.DisplayFor(modelItem => item.Average))
                        </td>
                        <td class="@styleScore">@item.Score</td>
                        @*<td>@item.Sequence</td>*@




                        colInc++;


                    }

            @*Round의 마지막 빈 컬럼*@
            @if (colInc < colcnt)
            {
                for (int i = colInc; i < colcnt; i++)
                {
                    <td></td>
                    <td></td>


                }

            }

        </tr>
        @*마지막테이블 종료*@
        <tr>
            <td colspan="@(colcnt*2)">
                @if (Model.Count() > 0)
                {
                    @if (!User.IsInRole("Member"))
                    {
                        <a asp-action="Edit" asp-route-id="@roundID" asp-route-winTeam="@winPre">점수입력</a> @:|
                        <a asp-action="EditTeam" asp-route-id="@roundID">팀수정</a> @:|
                        <a asp-action="NextTeam" asp-route-id="@roundID">다음경기</a> @:|
                        <a asp-action="DelTeam" asp-route-id="@roundID">게임삭제</a>
                    }
                    <div class="pull-right">@(fine == false ? "" : "에바벌금 : " + string.Format("{0:n0}", (downScoreCount * 1000)))</div>
                }


            </td>
        </tr>
    </table>



</div>
</div>
</div>

<div class="pull-right">
    <p>@(fine == false ? "" : "총 에바벌금 : " + string.Format("{0:n0}", (downScoreTotal * 1000)))</p>    
    <a asp-controller="Games" asp-action="Index" asp-route-gameGroup="@game.Group"  asp-route-gameKind="@Convert.ToInt32(Context.Request.Cookies["GameKind"])" 
       asp-route-cVal="true" class="btn btn-danger pull-right">Back to List</a>
</div>


    


@if (fine)
{
    for (int i = 0; i < downScoreTeam.Count(); i++)
    {
        <span>@((Char)(65 + i)) 팀 :  @string.Format("{0:n0}", (downScoreTeam[i] * 1000)) / </span>
    }

}


@section Styles {
    <link href="~/css/tabCss.css" rel="stylesheet">
}
