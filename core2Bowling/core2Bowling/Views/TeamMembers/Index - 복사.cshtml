@model IEnumerable<core2Bowling.Models.TeamMember>

@{
    ViewData["Title"] = "Index";
    var game = (Game)ViewData["Game"];
    int queryGame = Context.Request.Query["game"].ToString() == "" ? 1 : Convert.ToInt32(Context.Request.Query["game"]);
    int penalty = game.Penalty;

}
<h2>게임상세정보 &nbsp;&nbsp;<small><i class="glyphicon glyphicon glyphicon-hand-right"></i> 각 게임에 대한 상세 기록입니다</small></h2>
<hr />
<div class="panel panel-info">
    <div class="panel-heading">
        <h3 class="panel-title">경기개요</h3>
    </div>
    <div class="panel-body">
        <div class="text-danger  pull-left">@game.GameKind  @(string.IsNullOrEmpty(game.GameContent) ? "" : "(" + game.GameContent + ")") </div>
        &nbsp;&nbsp; | &nbsp;&nbsp; @game.Playtime  &nbsp;&nbsp; | &nbsp;&nbsp; @game.Place
        <div class="pull-right">
            @if (!User.IsInRole("Member"))
             {
                <a asp-action="Create" asp-route-id="@game.ID">새로운경기</a> @:|

            }
            <a asp-action="IndexGame" asp-route-id="@ViewContext.RouteData.Values["Id"]">개인결과</a>
        </div>
    </div>
</div>

<br />

<div class="tabbable-panel">
    <div class="tabbable-line">
        <ul class="nav nav-tabs ">

            @for (int i = 1; i < game.SubGames.Count() + 1; i++)
            {
                string selectActive = string.Empty;
                if (i == queryGame)
                {
                    selectActive = "active";
                }
                <li class="@selectActive">
                    <a href="#tab_game_@i" data-toggle="tab">
                        @i  경기
                    </a>
                </li>

            }

        </ul>
        <div class="tab-content">

            @{
                int teamSequence = -1;
                int round = 0;

                string teamName = string.Empty;
                int roundID = 0;
                int colcnt = 0;
                int downScoreCount = 0;
                int downScoreTotal = 0;

                int colInc = 0;
                

                string winwin = string.Empty;
                string winNext = string.Empty;

            }

            @foreach (var item in Model)
            {

                //라운드 처리 (각 라운드 처음)
                if (round != item.Team.SubGame.Round)
                {
                    if (round > 0)
                    {
                        if (colInc < colcnt)
                        {
                            //전체 게임의 마직막
                            for (int i = colInc; i < colcnt; i++)
                            {
                                @:<td></td>
                                @:<td></td>
                                
                            }

                        }
                        
                        @:</tr><tr>
                                   <td colspan="@(colcnt * 2)">
                                       @if (!User.IsInRole("Member"))
                                        {
                                           <a asp-action="Edit" asp-route-id="@roundID">점수입력</a> @:|
                                           <a asp-action="EditTeam" asp-route-id="@roundID">팀수정</a> @:|
                                           <a asp-action="NextTeam" asp-route-id="@roundID">다음경기</a> @:|
                                           <a asp-action="DelTeam" asp-route-id="@roundID">게임삭제</a>
                                       }
                                       <div class="pull-right">@("에바벌금 : " + string.Format("{0:n0}", (downScoreCount * 1000)))</div>
                                   </td>
                         @:</tr></table></div>


                        downScoreCount = 0;
                        

                    } //if(round > 0)


                    round = item.Team.SubGame.Round;

                    string selectActive = string.Empty;
                    if (round == queryGame)
                    {
                        selectActive = "active";
                    }

                    @:<div class="tab-pane @selectActive" id="tab_game_@round">
                    @:<table class="table table-bordered">
                    
                    //테이블 상단 총점 처리
                    teamName = string.Empty;

                    roundID = Model.Where(m => m.Team.SubGame.Round == round).First().Team.SubGameID;

                    var listScore = new List<int>();

                    var TeamScore = Model.Where(m => m.Team.SubGameID == roundID).GroupBy(t => t.Team.TeamName);
                    colcnt = TeamScore.Count();    /* 팀수*/
                    colInc = colcnt; /*컬럼수 초기화 역활을 함, 라운더 처음에 팀수와 차이로 발생하는 빈 컬럼 예방*/


                    foreach (var g in TeamScore)
                    {
                        var imsi = g.Sum(a => a.Score);

                        if (g.Key == winwin)
                        {
                            imsi -= penalty;
                        }
                        listScore.Add(imsi);

                    };

                    int maxTeamScore = listScore.Max();

                    <tr>
                        @{

                            string winPre = string.Empty;


                            winPre = winNext;

                        }
                        @foreach (var s in TeamScore)
                        {
                            string selectedRow = "";

                            int sScore = s.Sum(a => a.Score) - ((winPre == s.Key) ? penalty : 0);


                            if (sScore >= maxTeamScore && maxTeamScore != 0)
                            {
                                selectedRow = "success";
                                winNext = s.Key;
                                winwin = s.Key;
                            }

                            <td colspan="2" class="@selectedRow text-center">
                                @s.Key (@string.Format("{0:n0}", sScore) 점) @((winPre == s.Key) ? "*" : "")
                            </td>


                        }

                    </tr>



                }  //라운드 처리 (각 라운드 처음)


                string styleScore = "";

                if (item.Score > 200)
                {
                    styleScore = "overScore";
                }
                else if (item.Score - item.Average < 0)
                {
                    styleScore = "downScore";
                    downScoreCount++;
                    downScoreTotal++;
                }


                if (item.Sequence != teamSequence)
                {
                    if (teamSequence > -1)
                    {
                        // 해당 라인의 뒷 공백, 주의 라운드 앞 공백이 생겨서 colcnt와 colInc를 같은 값으로 초기화
                        if (colInc < colcnt )
                        {
                                for (int i = colInc; i < colcnt; i++)
                                {
                                    @:<td></td>
                                    @:<td></td>
                                    
                                }
                        }
                        @:</tr>
                    }

                    teamSequence = item.Sequence;
                    @:<tr>
                    colInc = 0;

                }

                //해당 라인의 앞 공백
                for (int i = colInc; i < item.Team.TeamOrder; i++)
                {
                    <td></td>
                    <td></td>


                }

                colInc = item.Team.TeamOrder;

                <td class="@(item.Bowler.BowlerAverage.Handicap > 0 ? "text-success":"")">
                    @Html.DisplayFor(modelItem => item.Bowler.Name)
                    (@Html.DisplayFor(modelItem => item.Average))
                </td>
                <td class="@styleScore">@item.Score</td>
                @*<td>@item.Sequence</td>*@


                    

                colInc++;


            }

            @*Round의 마지막 빈 컬럼*@
            @if (colInc < colcnt)
            {
                 for (int i = colInc; i < colcnt; i++)
                    {
                        <td></td>
                        <td></td>


                    }

            }

        </tr>
        @*마지막테이블 종료*@
        <tr>
            <td colspan="@(colcnt*2)">
            @if (Model.Count() > 0 && !User.IsInRole("Member"))
            {
            <a asp-action="Edit" asp-route-id="@roundID">점수입력</a> @:|
            <a asp-action="EditTeam" asp-route-id="@roundID">팀수정</a> @:|
            <a asp-action="NextTeam" asp-route-id="@roundID">다음경기</a> @:|
            <a asp-action="DelTeam" asp-route-id="@roundID">게임삭제</a> //
            <div class="pull-right">@("에바벌금 : " + string.Format("{0:n0}", (downScoreCount * 1000)))</div>
            }


            </td>
        </tr>
    </table>



</div>
</div>
</div>

<div class="pull-right">총 에바벌금 : @string.Format("{0:n0}", (downScoreTotal * 1000))</div>

@section Styles {
    <link href="~/css/tabCss.css" rel="stylesheet">
}
